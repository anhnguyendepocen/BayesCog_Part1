plot(p_grid, likelihood)
unstd.posterior <- likelihood * prior
plot(p_grid, unstd.posterior)
posterior <- unstd.posterior / sum(unstd.posterior)
plot(p_grid, posterior)
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
str(dataList)
dataList$w
library(rstan)
rstan_options(auto_write = TRUE)
modelFile <- '_scripts/binomial_globe_model.stan'
nChains   <- 4
nIter     <- 2000
nWarmup   <- floor(nIter/2)
nThin     <- 1
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
modelFile
cat("Estimating", modelFile, "model... \n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
#stan_trace(fit_globe)
class(fit_globe)
stan_trace(fit_globe, pars= 'p')
stan_trace(fit_globe, pars= 'p')
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
# =============================================================================
#### Running Stan ####
# =============================================================================
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
stan_trace(fit_globe, pars= 'p')
stan_dens(fit_globe, pars= 'p')
stan_plot(fit_globe, pars= 'p')
stan_plot(fit_globe, pars= 'p', show_density=T)
? stan_plot
stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99)
stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_colr = 'blue')
stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = 'blue')
pp = stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = 'blue')
class(p)
class(pp)
pp = stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = 'deeppink4')
pp = stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = #000000)
pp = stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = '#000000')
p_start <- 0
p_end   <- 1
n_grid  <- 20
w <- 6
N <- 9
# define grid
p_grid <- seq( from = p_start , to = p_end , length.out = n_grid )
# define prior
prior <- rep(1 , n_grid)
# compute likelihood at each value in grid
likelihood <- dbinom(w , size = N , prob = p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
# =============================================================================
#### Plot ####
# =============================================================================
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
p_start <- 0
p_end   <- 1
n_grid  <- 50
w <- 6
N <- 9
# define grid
p_grid <- seq( from = p_start , to = p_end , length.out = n_grid )
# define prior
prior <- rep(1 , n_grid)
# compute likelihood at each value in grid
likelihood <- dbinom(w , size = N , prob = p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
# =============================================================================
#### Plot ####
# =============================================================================
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
posterior
sum(posterior)
prior
p_grid
(p_grid <- seq( from = p_start , to = p_end , length.out = 20 ))
(p_grid <- seq( from = p_start , to = p_end , length.out = 50 ))
posterior[14]
p_start <- 0
p_end   <- 1
n_grid  <- 20
w <- 6
N <- 9
# define grid
p_grid <- seq( from = p_start , to = p_end , length.out = n_grid )
# define prior
prior <- rep(1 , n_grid)
# compute likelihood at each value in grid
likelihood <- dbinom(w , size = N , prob = p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
posterior[6]
p_start <- 0
p_end   <- 1
n_grid  <- 200
w <- 6
N <- 9
# define grid
p_grid <- seq( from = p_start , to = p_end , length.out = n_grid )
# define prior
prior <- rep(1 , n_grid)
# compute likelihood at each value in grid
likelihood <- dbinom(w , size = N , prob = p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
# =============================================================================
#### Plot ####
# =============================================================================
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
sum(unstd.posterior)
rstan:::rstudio_stanc("_scripts/binomial_globe_model.stan")
rstan:::rstudio_stanc("_scripts/binomial_globe_model_v2.stan")
rstan:::rstudio_stanc("_scripts/binomial_globe_model_v2.stan")
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model_v2.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe2 <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
print(fit_globe2)
plot_dens_sep <- stan_dens(fit_globe, separate_chains = T)
(plot_dens_sep <- stan_dens(fit_globe, separate_chains = T))
(plot_dens_sep <- stan_dens(fit_globe2, separate_chains = T))
plot_trace_incl_warm_up <- stan_trace(fit_globe, pars = 'p', inc_warmup = T)
(plot_trace_incl_warm_up <- stan_trace(fit_globe, pars = 'p', inc_warmup = T))
(plot_trace_incl_warm_up <- stan_trace(fit_globe2, pars = 'p', inc_warmup = T))
(plot_trace_incl_warm_up <- stan_trace(fit_globe2, pars = 'p', inc_warmup = T))
plot_trace_incl_warm_up <- stan_trace(fit_globe2, pars = 'p', inc_warmup = T)
graphics.off()
plot_trace_incl_warm_up <- stan_trace(fit_globe2, pars = 'p', inc_warmup = T)
(plot_trace_incl_warm_up <- stan_trace(fit_globe2, pars = 'p', inc_warmup = T))
(plot_trace_incl_warm_up <- stan_trace(fit_globe, pars = 'p', inc_warmup = T))
stan_plot(fit_globe, pars='p')
graphics.off()
stan_plot(fit_globe, pars='p', show_density=T)
stan_plot(fit_globe2, pars='p', show_density=T)
print(fit_globe)
print(fit_globe2)
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
source('E:/teaching/BayesCog_Wien/02.binomial_globe/_scripts/binomial_globe_main.R')
fit_globe$summary
fit_sumary = summary(fit_sumary)
fit_sumary = summary(fit_globe)
fit_sumary
summary(fit_globe)$summary[ , "50%"]
summary(fit_globe)$summary[ , "50%"]
f = readRDS('E:/projects/00_ongoing/EU_AIMS_PRL/_stanfits/_use!_260618/prl_ewa_indec_ppc_A_ASD.RData')
summary(f$fit)$summary[,"50%"]
a_asd$fit$phi
f$fit$`phi[1]`
f$fit$phi
f$fit$mu_phi
median(f$fit$mu_phi)
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
# =============================================================================
#### Running Stan ####
# =============================================================================
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
dataList
dataList
rstan:::rstudio_stanc("_scripts/binomial_globe_model_v3.stan")
cat("Estimating", modelFile, "model... \n")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model_v3.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
rstan:::rstudio_stanc("_scripts/binomial_globe_model_v3.stan")
rstan:::rstudio_stanc("_scripts/binomial_globe_model_v3.stan")
rm(list=ls(all=TRUE))
w <- c(6,7)
N <- 9
dataList <- list(w=w, N=N)
# =============================================================================
#### Running Stan ####
# =============================================================================
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model_v3.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
2019 - 1988 + 1
p_start <- 0
p_end   <- 1
n_grid  <- 20
w <- 6
N <- 9
p_grid <- seq( from = p_start , to = p_end , length.out = n_grid)
p_grid
length(p_grid)
p_grid
plot(p_grid)
prior <- rep(1 , n_grid)
prior
? dbinom
p_grid
likelihood <- dbinom(w , size = N , prob = p_grid )
plot(likelihood)
plot(likelihood, style='b')
plot(likelihood, type = ='b')
plot(likelihood, type = 'b')
plot(likelihood, type = 'b')
prior
unstd.posterior <- likelihood * prior
plot(unstd.posterior, type = 'b')
posterior <- unstd.posterior / sum(unstd.posterior)
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
graphics.off()
source('E:/teaching/BayesCog_Wien/02.binomial_globe/_scripts/binomial_globe_grid.R')
source('E:/teaching/BayesCog_Wien/02.binomial_globe/_scripts/binomial_globe_grid.R')
rm(list = ls())
graphics.off()
source('E:/teaching/BayesCog_Wien/02.binomial_globe/_scripts/binomial_globe_grid.R')
(17-4+1) * 5
3803 / 160
4214 / 160
R.version
w <- 6
N <- 9
dataList <- list(w=w, N=N)
dataList
w <- 6
N <- 9
dataList <- list(w=w, N=N)
dataList
w
N
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
parallel::detectCores()
parallel::detectCores()
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
modelFile <- '_scripts/my_first_stan_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
class(fit_globe)
print(fit_globe)
stan_trace(fit_globe, pars = 'theta', inc_warmup = F)
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
plot_trace_excl_warm_up <- stan_trace(fit_globe, pars = 'theta', inc_warmup = F)
plot_trace_incl_warm_up <- stan_trace(fit_globe, pars = 'theta', inc_warmup = T)
ggsave(plot = plot_trace_excl_warm_up, "_plots/trace_excl_warmup.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_trace_incl_warm_up, "_plots/trace_incl_warmup.png", width = 6, height = 4, type = "cairo-png", units = "in")
plot_dens_cmb <- stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
plot_dens_sep <- stan_dens(fit_globe, separate_chains = T)
ggsave(plot = plot_dens_cmb, "_plots/dens_cmb.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_sep, "_plots/dens_sep.png", width = 6, height = 4, type = "cairo-png", units = "in")
